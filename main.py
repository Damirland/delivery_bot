import telebot
from telebot import types
import json

TOKEN = "7811520905:AAEQ7OEK88ddKPDge48yRRhu2Bv0HRZJV2c"
bot = telebot.TeleBot(TOKEN)

carts = {}

ITEMS_PER_PAGE = 4

menu_items = [
    {"name": "–ì—Ä–∏–±–Ω–æ–π —Å—É–ø", "price": "450 —Ä—É–±.", "photo": "mushroom_soup.png"},
    {"name": "–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å", "price": "550 —Ä—É–±.", "photo": "caesar.png"},
    {"name": "–£—Ç–∫–∞ —Å –∞–ø–µ–ª—å—Å–∏–Ω–∞–º–∏", "price": "700 —Ä—É–±.", "photo": "duck_orange.png"},
    {"name": "–ë–µ—Ñ—Å—Ç—Ä–æ–≥–∞–Ω–æ–≤", "price": "650 —Ä—É–±.", "photo": "stroganoff.png"},
    {"name": "–†–∏–∑–æ—Ç—Ç–æ", "price": "500 —Ä—É–±.", "photo": "risotto.png"},
    {"name": "–¢–∏—Ä–∞–º–∏—Å—É", "price": "400 —Ä—É–±.", "photo": "tiramisu.png"},
    {"name": "–ë–ª–∏–Ω—ã", "price": "300 —Ä—É–±.", "photo": "pancakes.png"},
    {"name": "–ü–∞—Å—Ç–∞ –ö–∞—Ä–±–æ–Ω–∞—Ä–∞", "price": "550 —Ä—É–±.", "photo": "carbonara.png"},
    {"name": "–ì–∞—Å–ø–∞—á–æ", "price": "350 —Ä—É–±.", "photo": "gazpacho.png"},
    {"name": "–§–∞–ª–∞—Ñ–µ–ª—å", "price": "400 —Ä—É–±.", "photo": "falafel.png"}]


@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id, text=message.chat.id)
    bot.send_message(message.chat.id, "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=selection())


def selection():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    btn1 = types.KeyboardButton("–ú–µ–Ω—éüçú")
    btn2 = types.KeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞üß∫")
    btn3 = types.KeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å‚úÖ")

    markup.add(btn1, btn2, btn3)
    return markup


def generate_markup(page=0):
    markup = types.InlineKeyboardMarkup()
    start_index = page * ITEMS_PER_PAGE
    end_index = start_index + ITEMS_PER_PAGE

    for food in menu_items[start_index:end_index]:
        button = types.InlineKeyboardButton(f"{food["name"]}: {food["price"]}",
                                            callback_data=f"item_{menu_items.index(food)}")
        markup.add(button)

    if page > 0:
        markup.add(types.InlineKeyboardButton(text="<<", callback_data=f"page_{page - 1}"))
    if end_index < len(menu_items):
        markup.add(types.InlineKeyboardButton(text=">>", callback_data=f"page_{page + 1}"))

    return markup


@bot.callback_query_handler(func=lambda call: True)
def query_handler(call):
    bot.answer_callback_query(call.id)
    if call.data.startswith('page_'):
        _, page = call.data.split('_')
        markup = generate_markup(int(page))
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text="–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç:", reply_markup=markup)
    elif call.data.startswith('item_'):
        _, item_index = call.data.split('_')
        add_to_cart(call.message.chat.id, menu_items[int(item_index)])
        bot.send_message(call.message.chat.id, f'{menu_items[int(item_index)]["name"]} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∑–∞–∫–∞–∑')


def add_to_cart(client_id, item):
    with open("data.json", 'r', encoding="utf-8") as file:
        data = json.load(file)

    clients = data.get("clients", [])
    for client in clients:
        if client.get("id") == str(client_id):
            for cart_item in client["id"]:
                if cart_item[0] == item:
                    cart_item[1] += 1
            else:
                client["cart"].append([item, 1])

    with open("data.json", 'w', encoding="utf-8") as file:
        json.dump(data, file, ensure_ascii=False)


def delete_from_cart(client_id, item):
    with open("data.json", "r", encoding="utf-8") as f:
        data = json.load(f)
    clients = data.get("clients", [])
    for client in clients:
        if client.get("id") == str(client_id):
            for cart_item in client["id"]:
                if cart_item[1] != 1:
                    if cart_item[0] == item:
                        cart_item[1] -= 1
                else:
                    client["cart"].remove([item, 1])
    with open("data.json", "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False)


def button_basket(message):
    items_in_cart = get_cart(message.chat.id)

    markup = types.InlineKeyboardMarkup()
    if items_in_cart:
        for item in items_in_cart:
            minus_button = types.InlineKeyboardButton("-", callback_data=f"minus_{item}")
            name_button = types.InlineKeyboardButton(f"{item[0]} x{item[1]}", callback_data=f"name_{item}")
            plus_button = types.InlineKeyboardButton("+", callback_data=f"plus_{item}")

            markup.add(minus_button, name_button, plus_button)
        return markup


def get_cart(client_id):
    with open("data.json", 'r', encoding="utf-8") as file:
        data = json.load(file)

    clients = data.get("clients", [])
    for client in clients:
        if client.get("id") == str(client_id):
            return client.get("cart", [])

    return None


# def get_username(message):
#     chat_id = message.chat.id
#     user_info[chat_id]['name'] = message.text
#     msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
#     bot.register_next_step_handler(msg, get_phone_number)
#
#
# def get_phone_number(message):
#     chat_id = message.chat.id
#     user_info[chat_id]['phone'] = message.text
#     bot.send_message(chat_id,
#                      f"–í–∞—à–µ –∏–º—è: {user_info[chat_id]['name']}\n–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_info[chat_id]['phone']}")


# @bot.message_handler(commands=["add_info"])
# def add_info(message):
#     user_info[message.chat.id] = {}
#     msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
#     bot.register_next_step_handler(msg, get_username)
#
#
# def user_save(message, client_id, item):
#     with open('data.json', 'r', encoding='utf-8') as file:
#         data = json.load(file)
#
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     clients = data.get("clients", [])
#     for client in clients:
#         if client.get("id") == str(client_id):
#             for cart_item in client["id"]:
#                 if cart_item[0] == item:
#                     cart_item[1] += 1
#             else:
#                 client["cart"].append([item, 1])
#
#     # –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
#     with open('data.json', 'w', encoding='utf-8') as file:
#         json.dump(data, file, ensure_ascii=False)
#
#     bot.send_message(message.chat.id, "–í–∞—à–µ –∏–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")


@bot.message_handler(func=lambda message: True)
def echo_all(message):
    if message.text == "–ú–µ–Ω—éüçú":
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ:", reply_markup=generate_markup())

    elif message.text == "–ö–æ—Ä–∑–∏–Ω–∞üß∫":
        items_in_cart = get_cart(message.chat.id)

        markup = types.InlineKeyboardMarkup()
        for item in items_in_cart:
            minus_button = types.InlineKeyboardButton("-", callback_data=f"minus_{item}")
            name_button = types.InlineKeyboardButton(f"{item[0]} x{item[1]}", callback_data=f"name_{item}")
            plus_button = types.InlineKeyboardButton("+", callback_data=f"plus_{item}")

            markup.add(minus_button, name_button, plus_button)

        bot.send_message(message.chat.id, "–ö–æ—Ä–∑–∏–Ω–∞:", reply_markup=markup)
    elif message.text == "–ó–∞–∫–∞–∑–∞—Ç—å‚úÖ":
        items = get_cart(message.chat.id)
        text = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"
        for item in items:
            text += "‚ú® " + str(items[0]["name"]) + " x" + str(items[1]["price"]) + "\n"
        bot.send_message(message.chat.id, text)
        bot.send_message(message.chat.id, "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞.")


bot.polling(none_stop=True)
